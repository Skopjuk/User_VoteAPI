// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: grpc/vote.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteServiceClient is the client API for VoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteServiceClient interface {
	AddVote(ctx context.Context, in *AddVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeVote(ctx context.Context, in *ChangeVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllVotes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllVotesResponce, error)
	DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVoteByUserIds(ctx context.Context, in *GetVoteByUserIdsRequest, opts ...grpc.CallOption) (*GetVoteByUserIdsResponce, error)
}

type voteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteServiceClient(cc grpc.ClientConnInterface) VoteServiceClient {
	return &voteServiceClient{cc}
}

func (c *voteServiceClient) AddVote(ctx context.Context, in *AddVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/VoteService/AddVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) ChangeVote(ctx context.Context, in *ChangeVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/VoteService/ChangeVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) GetAllVotes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllVotesResponce, error) {
	out := new(GetAllVotesResponce)
	err := c.cc.Invoke(ctx, "/VoteService/GetAllVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/VoteService/DeleteVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) GetVoteByUserIds(ctx context.Context, in *GetVoteByUserIdsRequest, opts ...grpc.CallOption) (*GetVoteByUserIdsResponce, error) {
	out := new(GetVoteByUserIdsResponce)
	err := c.cc.Invoke(ctx, "/VoteService/GetVoteByUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServiceServer is the server API for VoteService service.
// All implementations must embed UnimplementedVoteServiceServer
// for forward compatibility
type VoteServiceServer interface {
	AddVote(context.Context, *AddVoteRequest) (*emptypb.Empty, error)
	ChangeVote(context.Context, *ChangeVoteRequest) (*emptypb.Empty, error)
	GetAllVotes(context.Context, *emptypb.Empty) (*GetAllVotesResponce, error)
	DeleteVote(context.Context, *DeleteVoteRequest) (*emptypb.Empty, error)
	GetVoteByUserIds(context.Context, *GetVoteByUserIdsRequest) (*GetVoteByUserIdsResponce, error)
	mustEmbedUnimplementedVoteServiceServer()
}

// UnimplementedVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoteServiceServer struct {
}

func (UnimplementedVoteServiceServer) AddVote(context.Context, *AddVoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVote not implemented")
}
func (UnimplementedVoteServiceServer) ChangeVote(context.Context, *ChangeVoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVote not implemented")
}
func (UnimplementedVoteServiceServer) GetAllVotes(context.Context, *emptypb.Empty) (*GetAllVotesResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVotes not implemented")
}
func (UnimplementedVoteServiceServer) DeleteVote(context.Context, *DeleteVoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVote not implemented")
}
func (UnimplementedVoteServiceServer) GetVoteByUserIds(context.Context, *GetVoteByUserIdsRequest) (*GetVoteByUserIdsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteByUserIds not implemented")
}
func (UnimplementedVoteServiceServer) mustEmbedUnimplementedVoteServiceServer() {}

// UnsafeVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteServiceServer will
// result in compilation errors.
type UnsafeVoteServiceServer interface {
	mustEmbedUnimplementedVoteServiceServer()
}

func RegisterVoteServiceServer(s grpc.ServiceRegistrar, srv VoteServiceServer) {
	s.RegisterService(&VoteService_ServiceDesc, srv)
}

func _VoteService_AddVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).AddVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoteService/AddVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).AddVote(ctx, req.(*AddVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_ChangeVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).ChangeVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoteService/ChangeVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).ChangeVote(ctx, req.(*ChangeVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_GetAllVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).GetAllVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoteService/GetAllVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).GetAllVotes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoteService/DeleteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).DeleteVote(ctx, req.(*DeleteVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_GetVoteByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteByUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).GetVoteByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoteService/GetVoteByUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).GetVoteByUserIds(ctx, req.(*GetVoteByUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoteService_ServiceDesc is the grpc.ServiceDesc for VoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VoteService",
	HandlerType: (*VoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVote",
			Handler:    _VoteService_AddVote_Handler,
		},
		{
			MethodName: "ChangeVote",
			Handler:    _VoteService_ChangeVote_Handler,
		},
		{
			MethodName: "GetAllVotes",
			Handler:    _VoteService_GetAllVotes_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _VoteService_DeleteVote_Handler,
		},
		{
			MethodName: "GetVoteByUserIds",
			Handler:    _VoteService_GetVoteByUserIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/vote.proto",
}
